apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  labels:
    provider: aws
  name: xclusters.aws.cloud.iac
spec:
  compositeTypeRef:
    apiVersion: aws.cloud.iac/v1alpha1
    kind: XCluster
  mode: Pipeline
  pipeline:
    - step: create-eks-cluster
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            ---
            apiVersion: iam.aws.upbound.io/v1beta1
            kind: Role
            metadata:
              name: {{ .observed.composite.resource.spec.name }}-control-plane-role
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: "{{ .observed.composite.resource.spec.name }}-cluster-role"
            spec:
              forProvider:
                forceDetachPolicies: true
                managedPolicyArns:
                  - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
                assumeRolePolicy: |
                  {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "eks.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                  }
                tags: 
                {{ range $key, $value := .observed.composite.resource.spec.tags }}
                  Name : {{ $.observed.composite.resource.spec.name }}
                  {{ $key }}: {{ $value }}
                {{ end }}
              initProvider:
                tags:
                  creation_date: {{ now.Format "02-01-06" }}
            ---
            apiVersion: eks.aws.upbound.io/v1beta2
            kind: Cluster
            metadata:
              name: {{ .observed.composite.resource.spec.name }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: "{{ .observed.composite.resource.spec.name }}"
            spec:
              forProvider:
                accessConfig:
                  authenticationMode: API_AND_CONFIG_MAP
                  bootstrapClusterCreatorAdminPermissions: true
                region: {{ .observed.composite.resource.spec.region }}
                version: "{{ .observed.composite.resource.spec.version }}"
                roleArnRef:
                  name: {{ .observed.composite.resource.spec.name }}-control-plane-role
                vpcConfig:
                  endpointPrivateAccess: true
                  endpointPublicAccess: false
                  # publicAccessCidrs:  # add public ip from the shell function
                  subnetIdSelector:
                    matchLabels:
                      {{ range $key, $value := .observed.composite.resource.spec.subnetSelector }}
                        {{ $key }}: {{ $value }}
                      {{ end }}
                # remoteNetworkConfig:
                #   remoteNodeNetworks:
                #     cidrs:
                #       - 172.16.0.0/12
                tags: 
                {{ range $key, $value := .observed.composite.resource.spec.tags }}
                  Name : {{ $.observed.composite.resource.spec.name }}
                  {{ $key }}: {{ $value }}
                {{ end }}
              initProvider:
                tags:
                  creation_date: {{ now.Format "02-01-06" }}
            ---
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: SecurityGroupRule
            metadata:
              name: {{ .observed.composite.resource.spec.name }}-cluster-ingress-rule
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: "{{ .observed.composite.resource.spec.name }}-cluster-ingress-rule"
            spec:
              forProvider:
                cidrBlocks:
                  - 110.0.0.0/16
                fromPort: 443
                protocol: tcp
                region: {{ .observed.composite.resource.spec.region }}
                {{ if ne .observed.resources nil }}
                {{ $ekscondition := ( index $.observed.resources $.observed.composite.resource.spec.name ) | getResourceCondition "Ready" }}
                {{ if eq $ekscondition.Status "True" }}
                securityGroupId: {{ ( index $.observed.resources $.observed.composite.resource.spec.name ).resource.status.atProvider.vpcConfig.clusterSecurityGroupId }}
                {{ end }}
                {{ end }}
                toPort: 443
                type: ingress

    - step: create-nodegroup
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            ---
            apiVersion: iam.aws.upbound.io/v1beta1
            kind: Role
            metadata:
              name: {{ .observed.composite.resource.spec.name }}-nodegroup-role
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: "{{ .observed.composite.resource.spec.name }}-nodegroup-role"
            spec:
              forProvider:
                forceDetachPolicies: true
                managedPolicyArns:
                  - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
                  - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
                  - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
                assumeRolePolicy: |
                  {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                  }
                tags: 
                {{ range $key, $value := .observed.composite.resource.spec.tags }}
                  Name : {{ $.observed.composite.resource.spec.name }}
                  {{ $key }}: {{ $value }}
                {{ end }}
              initProvider:
                tags:
                  creation_date: {{ now.Format "02-01-06" }}
            {{/* Nodegroup */}}
            {{- range .observed.composite.resource.spec.nodegroups }}
            ---
            apiVersion: eks.aws.upbound.io/v1beta2
            kind: NodeGroup
            metadata:
              name: {{ $.observed.composite.resource.spec.name }}-{{ .name }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: "{{ $.observed.composite.resource.spec.name }}-{{ .name }}"
            spec:
              forProvider:
                capacityType: SPOT
                clusterNameSelector:
                  matchControllerRef: true
                nodeRoleArnRef:
                  name: {{ $.observed.composite.resource.spec.name }}-nodegroup-role
                region: {{ $.observed.composite.resource.spec.region }}
                instanceTypes:
                  - {{ .instanceType | default "t3.micro" }}
                diskSize: {{ .diskSize | default "20" }}
                forceUpdateVersion: true
                subnetIdSelector:
                  matchLabels:
                    {{ range $key, $value := $.observed.composite.resource.spec.subnetSelector }}
                      {{ $key }}: {{ $value }}
                    {{ end }}
                labels:
                  {{- range $key, $value := .labels }}
                  {{ $key }}: {{ $value }}
                  {{- end }}
                scalingConfig:
                  minSize: {{ .minSize | default 1 }}
                  maxSize: {{ .maxSize | default 3 }}
                tags:
                  Name : {{ $.observed.composite.resource.spec.name }}-{{ .name }}
                {{range $key, $value := $.observed.composite.resource.spec.tags }}
                  {{ $key }}: {{ $value }}
                {{ end }}
              initProvider:
                tags:
                  creation_date: {{ now.Format "02-01-06" }}
                scalingConfig:
                  desiredSize: {{ .desiredSize | default 1 }}
            {{- end }}

    - step: create-access-entry
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            {{- range .observed.composite.resource.spec.accessEntries }}
            ---
            apiVersion: eks.aws.upbound.io/v1beta1
            kind: AccessEntry
            metadata:
              name: {{ $.observed.composite.resource.spec.name }}-{{ (index (splitList "/" .principalArn) 1 | splitList "@" | first) }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: "{{ $.observed.composite.resource.spec.name }}-{{ (index (splitList "/" .principalArn) 1 | splitList "@" | first) }}"
              labels:
                {{ $.observed.composite.resource.spec.name }}: "{{ (index (splitList "/" .principalArn) 1 | splitList "@" | first) }}"
            spec:
              forProvider:
                clusterNameSelector:
                  matchControllerRef: true
                principalArn: {{ .principalArn }}
                region: {{ $.observed.composite.resource.spec.region }}
                type: STANDARD
            ---
            apiVersion: eks.aws.upbound.io/v1beta1
            kind: AccessPolicyAssociation
            metadata:
              name: {{ $.observed.composite.resource.spec.name }}-{{ (index (splitList "/" .principalArn) 1 | splitList "@" | first) }}-access-policy
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: "{{ $.observed.composite.resource.spec.name }}-{{ (index (splitList "/" .principalArn) 1 | splitList "@" | first) }}-access-policy"
            spec:
              forProvider:
                accessScope:
                  type: cluster
                clusterNameSelector:
                  matchControllerRef: true
                policyArn: "{{ .policyArn }}"
                principalArnSelector:
                  matchLabels:
                    {{ $.observed.composite.resource.spec.name }}: "{{ (index (splitList "/" .principalArn) 1 | splitList "@" | first) }}"
                region: {{ $.observed.composite.resource.spec.region }}
            {{- end }}

    - step: create-managed-addons
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            {{/* Managed Addons */}}
            {{- range .observed.composite.resource.spec.managedAddons }}
            ---
            apiVersion: eks.aws.upbound.io/v1beta1
            kind: Addon
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: "{{ $.observed.composite.resource.spec.name }}-{{ .name }}"
              name: {{ $.observed.composite.resource.spec.name }}-{{ .name }}
            spec:
              forProvider:
                addonName: {{ .name }}
                {{- if .version }}
                addonVersion: "{{ .version }}"
                {{- end }}
                clusterNameRef:
                  name: {{ $.observed.composite.resource.spec.name }}
                region: {{ $.observed.composite.resource.spec.region }}
                {{- if .configurationValues }}
                configurationValues: '{{ .configurationValues }}'
                {{- end }}
                tags: 
                  Name : {{ $.observed.composite.resource.spec.name }}-{{ .name }}
                {{range $key, $value := $.observed.composite.resource.spec.tags }}
                  {{ $key }}: {{ $value }}
                {{ end }}
              initProvider:
                tags:
                  creation_date: {{ now.Format "02-01-06" }}
            {{- end }}

    - step: create-external-addons
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            ---
            apiVersion: eks.aws.upbound.io/v1beta1
            kind: ClusterAuth
            metadata:
              name: {{ .observed.composite.resource.spec.name }}-cluster-auth
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: "{{ .observed.composite.resource.spec.name }}-cluster-auth"
            spec:
              forProvider:
                clusterNameSelector:
                  matchControllerRef: true
                region: {{ .observed.composite.resource.spec.region }}
              writeConnectionSecretToRef:
                name: {{ .observed.composite.resource.spec.name }}-kubeconfig
                namespace: crossplane-system
            ---
            apiVersion: helm.crossplane.io/v1beta1
            kind: ProviderConfig
            metadata:
              name: {{ .observed.composite.resource.spec.name }}-helm-provider
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: "{{ .observed.composite.resource.spec.name }}-helm-provider"
                gotemplating.fn.crossplane.io/ready: "True"
            spec:
              credentials:
                secretRef:
                  key: kubeconfig
                  name: {{ .observed.composite.resource.spec.name }}-kubeconfig
                  namespace: crossplane-system
                source: Secret
            ---
            apiVersion: kubernetes.crossplane.io/v1alpha1
            kind: ProviderConfig
            metadata:
              name: {{ .observed.composite.resource.spec.name }}-kubernetes-provider
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: "{{ .observed.composite.resource.spec.name }}-kubernetes-provider"
                gotemplating.fn.crossplane.io/ready: "True"
            spec:
              credentials:
                secretRef:
                  key: kubeconfig
                  name: {{ .observed.composite.resource.spec.name }}-kubeconfig
                  namespace: crossplane-system
                source: Secret
            {{- if ne .observed.resources nil }}
            {{ $ekscondition := ( index $.observed.resources $.observed.composite.resource.spec.name ) | getResourceCondition "Ready" }}
            {{- if eq $ekscondition.Status "True" }}
            {{- range $.observed.composite.resource.spec.externalAddons }}
            {{- if eq .name "aws-load-balancer-controller" }}
            ---
            apiVersion: iam.aws.upbound.io/v1beta1
            kind: Role
            metadata:
              name: {{ $.observed.composite.resource.spec.name }}-{{ .name }}-role
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: "{{ $.observed.composite.resource.spec.name }}-{{ .name }}-role"
              labels:
                {{ $.observed.composite.resource.spec.name }}: {{ .name }}
            spec:
              forProvider:
                forceDetachPolicies: true
                inlinePolicy:
                  - name: AWSLoadBalancerControllerIAMPolicy
                    policy: |
                      {"Version":"2012-10-17","Statement":[{"Effect":"Allow","Action":["iam:CreateServiceLinkedRole"],"Resource":"*","Condition":{"StringEquals":{"iam:AWSServiceName":"elasticloadbalancing.amazonaws.com"}}},{"Effect":"Allow","Action":["ec2:DescribeAccountAttributes","ec2:DescribeAddresses","ec2:DescribeAvailabilityZones","ec2:DescribeInternetGateways","ec2:DescribeVpcs","ec2:DescribeVpcPeeringConnections","ec2:DescribeSubnets","ec2:DescribeSecurityGroups","ec2:DescribeInstances","ec2:DescribeNetworkInterfaces","ec2:DescribeTags","ec2:GetCoipPoolUsage","ec2:DescribeCoipPools","ec2:GetSecurityGroupsForVpc","ec2:DescribeIpamPools","elasticloadbalancing:DescribeLoadBalancers","elasticloadbalancing:DescribeLoadBalancerAttributes","elasticloadbalancing:DescribeListeners","elasticloadbalancing:DescribeListenerCertificates","elasticloadbalancing:DescribeSSLPolicies","elasticloadbalancing:DescribeRules","elasticloadbalancing:DescribeTargetGroups","elasticloadbalancing:DescribeTargetGroupAttributes","elasticloadbalancing:DescribeTargetHealth","elasticloadbalancing:DescribeTags","elasticloadbalancing:DescribeTrustStores","elasticloadbalancing:DescribeListenerAttributes","elasticloadbalancing:DescribeCapacityReservation"],"Resource":"*"},{"Effect":"Allow","Action":["cognito-idp:DescribeUserPoolClient","acm:ListCertificates","acm:DescribeCertificate","iam:ListServerCertificates","iam:GetServerCertificate","waf-regional:GetWebACL","waf-regional:GetWebACLForResource","waf-regional:AssociateWebACL","waf-regional:DisassociateWebACL","wafv2:GetWebACL","wafv2:GetWebACLForResource","wafv2:AssociateWebACL","wafv2:DisassociateWebACL","shield:GetSubscriptionState","shield:DescribeProtection","shield:CreateProtection","shield:DeleteProtection"],"Resource":"*"},{"Effect":"Allow","Action":["ec2:AuthorizeSecurityGroupIngress","ec2:RevokeSecurityGroupIngress"],"Resource":"*"},{"Effect":"Allow","Action":["ec2:CreateSecurityGroup"],"Resource":"*"},{"Effect":"Allow","Action":["ec2:CreateTags"],"Resource":"arn:aws:ec2:*:*:security-group/*","Condition":{"StringEquals":{"ec2:CreateAction":"CreateSecurityGroup"},"Null":{"aws:RequestTag/elbv2.k8s.aws/cluster":"false"}}},{"Effect":"Allow","Action":["ec2:CreateTags","ec2:DeleteTags"],"Resource":"arn:aws:ec2:*:*:security-group/*","Condition":{"Null":{"aws:RequestTag/elbv2.k8s.aws/cluster":"true","aws:ResourceTag/elbv2.k8s.aws/cluster":"false"}}},{"Effect":"Allow","Action":["ec2:AuthorizeSecurityGroupIngress","ec2:RevokeSecurityGroupIngress","ec2:DeleteSecurityGroup"],"Resource":"*","Condition":{"Null":{"aws:ResourceTag/elbv2.k8s.aws/cluster":"false"}}},{"Effect":"Allow","Action":["elasticloadbalancing:CreateLoadBalancer","elasticloadbalancing:CreateTargetGroup"],"Resource":"*","Condition":{"Null":{"aws:RequestTag/elbv2.k8s.aws/cluster":"false"}}},{"Effect":"Allow","Action":["elasticloadbalancing:CreateListener","elasticloadbalancing:DeleteListener","elasticloadbalancing:CreateRule","elasticloadbalancing:DeleteRule"],"Resource":"*"},{"Effect":"Allow","Action":["elasticloadbalancing:AddTags","elasticloadbalancing:RemoveTags"],"Resource":["arn:aws:elasticloadbalancing:*:*:targetgroup/*/*","arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*","arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"],"Condition":{"Null":{"aws:RequestTag/elbv2.k8s.aws/cluster":"true","aws:ResourceTag/elbv2.k8s.aws/cluster":"false"}}},{"Effect":"Allow","Action":["elasticloadbalancing:AddTags","elasticloadbalancing:RemoveTags"],"Resource":["arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*","arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*","arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*","arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*"]},{"Effect":"Allow","Action":["elasticloadbalancing:ModifyLoadBalancerAttributes","elasticloadbalancing:SetIpAddressType","elasticloadbalancing:SetSecurityGroups","elasticloadbalancing:SetSubnets","elasticloadbalancing:DeleteLoadBalancer","elasticloadbalancing:ModifyTargetGroup","elasticloadbalancing:ModifyTargetGroupAttributes","elasticloadbalancing:DeleteTargetGroup","elasticloadbalancing:ModifyListenerAttributes","elasticloadbalancing:ModifyCapacityReservation","elasticloadbalancing:ModifyIpPools"],"Resource":"*","Condition":{"Null":{"aws:ResourceTag/elbv2.k8s.aws/cluster":"false"}}},{"Effect":"Allow","Action":["elasticloadbalancing:AddTags"],"Resource":["arn:aws:elasticloadbalancing:*:*:targetgroup/*/*","arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*","arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"],"Condition":{"StringEquals":{"elasticloadbalancing:CreateAction":["CreateTargetGroup","CreateLoadBalancer"]},"Null":{"aws:RequestTag/elbv2.k8s.aws/cluster":"false"}}},{"Effect":"Allow","Action":["elasticloadbalancing:RegisterTargets","elasticloadbalancing:DeregisterTargets"],"Resource":"arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"},{"Effect":"Allow","Action":["elasticloadbalancing:SetWebAcl","elasticloadbalancing:ModifyListener","elasticloadbalancing:AddListenerCertificates","elasticloadbalancing:RemoveListenerCertificates","elasticloadbalancing:ModifyRule","elasticloadbalancing:SetRulePriorities"],"Resource":"*"}]}
                assumeRolePolicy: |
                  {
                      "Version": "2012-10-17",
                      "Statement": [
                          {
                              "Sid": "AllowEksAuthToAssumeRoleForPodIdentity",
                              "Effect": "Allow",
                              "Principal": {
                                  "Service": "pods.eks.amazonaws.com"
                              },
                              "Action": [
                                  "sts:AssumeRole",
                                  "sts:TagSession"
                              ]
                          }
                      ]
                  }
                tags: 
                {{ range $key, $value := $.observed.composite.resource.spec.tags }}
                  Name : {{ $.observed.composite.resource.spec.name }}
                  {{ $key }}: {{ $value }}
                {{ end }}
              initProvider:
                tags:
                  creation_date: {{ now.Format "02-01-06" }}
            ---
            apiVersion: eks.aws.upbound.io/v1beta1
            kind: PodIdentityAssociation
            metadata:
              name: {{ $.observed.composite.resource.spec.name }}-{{ .name }}-pod-identity
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: "{{ $.observed.composite.resource.spec.name }}-{{ .name }}-pod-identity"
            spec:
              forProvider:
                clusterNameSelector:
                  matchControllerRef: true
                namespace: kube-infra
                region: {{ $.observed.composite.resource.spec.region }}
                roleArnSelector:
                  matchLabels:
                    {{ $.observed.composite.resource.spec.name }}: {{ .name }}
                serviceAccount: aws-load-balancer-controller
            ---
            apiVersion: helm.crossplane.io/v1beta1
            kind: Release
            metadata:
              name: {{ $.observed.composite.resource.spec.name }}-{{ .name }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: "{{ $.observed.composite.resource.spec.name }}-{{ .name }}"
            spec:
              forProvider:
                chart:
                  name: {{ .name }}
                  repository: https://aws.github.io/eks-charts
                  version: {{ .version }}
                namespace: kube-infra
                values:
                  clusterName: {{ $.observed.composite.resource.spec.name }}
                  region: {{ $.observed.composite.resource.spec.region }}
                  vpcId: {{ ( index $.observed.resources $.observed.composite.resource.spec.name ).resource.status.atProvider.vpcConfig.clusterSecurityGroupId }}
                  serviceAccount:
                    create: true
                  {{ if .values }}
                  {{ .values | toYaml | nindent 6 }}
                  {{ end }}
              providerConfigRef:
                name: {{ $.observed.composite.resource.spec.name }}-helm-provider
            ---
            apiVersion: helm.crossplane.io/v1beta1
            kind: ProviderConfigUsage
            metadata:
              name: {{ $.observed.composite.resource.spec.name }}-{{ .name }}-pcu
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: "{{ $.observed.composite.resource.spec.name }}-{{ .name }}-pcu"
                gotemplating.fn.crossplane.io/ready: "True"
            providerConfigRef:
              name: {{ $.observed.composite.resource.spec.name }}-helm-provider
            resourceRef:
              apiVersion: helm.crossplane.io/v1beta1
              kind: Release
              name: {{ $.observed.composite.resource.spec.name }}-{{ .name }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- end }}

    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: function-auto-ready

